// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LogEntryTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "LogEntryTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "LogEntry.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_CanLogEntry_type_identifier(
        TypeIdentifierPair& type_ids_CanLogEntry)
{

    ReturnCode_t return_code_CanLogEntry {eprosima::fastdds::dds::RETCODE_OK};
    return_code_CanLogEntry =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "CanLogEntry", type_ids_CanLogEntry);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_CanLogEntry)
    {
        StructTypeFlag struct_flags_CanLogEntry = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_CanLogEntry = "CanLogEntry";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_CanLogEntry;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_CanLogEntry;
        CompleteTypeDetail detail_CanLogEntry = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_CanLogEntry, ann_custom_CanLogEntry, type_name_CanLogEntry.to_string());
        CompleteStructHeader header_CanLogEntry;
        header_CanLogEntry = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_CanLogEntry);
        CompleteStructMemberSeq member_seq_CanLogEntry;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_CanLogEntry.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_CanLogEntry);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_CanLogEntry, member_index);
        }
        {
            TypeIdentifierPair type_ids_can_id;
            ReturnCode_t return_code_can_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_can_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_can_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_can_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "can_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_can_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_can_id = 0x00000001;
            bool common_can_id_ec {false};
            CommonStructMember common_can_id {TypeObjectUtils::build_common_struct_member(member_id_can_id, member_flags_can_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_can_id, common_can_id_ec))};
            if (!common_can_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure can_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_can_id = "can_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_can_id;
            ann_custom_CanLogEntry.reset();
            CompleteMemberDetail detail_can_id = TypeObjectUtils::build_complete_member_detail(name_can_id, member_ann_builtin_can_id, ann_custom_CanLogEntry);
            CompleteStructMember member_can_id = TypeObjectUtils::build_complete_struct_member(common_can_id, detail_can_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_CanLogEntry, member_can_id);
        }
        {
            TypeIdentifierPair type_ids_value;
            ReturnCode_t return_code_value {eprosima::fastdds::dds::RETCODE_OK};
            return_code_value =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_value);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_value)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "value Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_value = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_value = 0x00000002;
            bool common_value_ec {false};
            CommonStructMember common_value {TypeObjectUtils::build_common_struct_member(member_id_value, member_flags_value, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_value, common_value_ec))};
            if (!common_value_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure value member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_value = "value";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_value;
            ann_custom_CanLogEntry.reset();
            CompleteMemberDetail detail_value = TypeObjectUtils::build_complete_member_detail(name_value, member_ann_builtin_value, ann_custom_CanLogEntry);
            CompleteStructMember member_value = TypeObjectUtils::build_complete_struct_member(common_value, detail_value);
            TypeObjectUtils::add_complete_struct_member(member_seq_CanLogEntry, member_value);
        }
        {
            TypeIdentifierPair type_ids_timestamp;
            ReturnCode_t return_code_timestamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_timestamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_timestamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_timestamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "timestamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_timestamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_timestamp = 0x00000003;
            bool common_timestamp_ec {false};
            CommonStructMember common_timestamp {TypeObjectUtils::build_common_struct_member(member_id_timestamp, member_flags_timestamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_timestamp, common_timestamp_ec))};
            if (!common_timestamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure timestamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_timestamp = "timestamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_timestamp;
            ann_custom_CanLogEntry.reset();
            CompleteMemberDetail detail_timestamp = TypeObjectUtils::build_complete_member_detail(name_timestamp, member_ann_builtin_timestamp, ann_custom_CanLogEntry);
            CompleteStructMember member_timestamp = TypeObjectUtils::build_complete_struct_member(common_timestamp, detail_timestamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_CanLogEntry, member_timestamp);
        }
        CompleteStructType struct_type_CanLogEntry = TypeObjectUtils::build_complete_struct_type(struct_flags_CanLogEntry, header_CanLogEntry, member_seq_CanLogEntry);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_CanLogEntry, type_name_CanLogEntry.to_string(), type_ids_CanLogEntry))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "CanLogEntry already registered in TypeObjectRegistry for a different type.");
        }
    }
}

